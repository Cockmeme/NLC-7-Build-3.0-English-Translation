last_edit = "04.11.2010 by alpet"
--[[

File:	gps_habar.script
Copyright by Idler(and AMK TEAM 2007-2008 местами :)
rev: 11/10/08.01
]]

local is_gps_debug = false
local max_comments_strings_on_screen = 40
local labels = {}
local items_in_box = {}
local activity_time = 0
local warning_time = 0
local warning_icons_time = 0
local habar_list_mode = true
local auto_recharge = true
local is_show_quantity = true
local is_update_on_time = true
local is_set_label_on_npc = true
local is_show_health = false
local is_warning_on_death = false
local is_color_and_sort_list = true

local is_gps_update_in_process = false -- для устранения коллизий при "on_actor_update"

function trim(s)
	return(string.gsub(s, "^%s*(.-)%s*$", "%1"))
end

function toboolean(_str)
	if string.find(string.lower(_str), "true",1,true) or _str=="1" then
		return true
	end
	
	return false
end

function game_minutes()
	local gtime = misc.game_time_minutes()	--time in game minutes
	return gtime
end

function game_hours()
	local gtime = level.get_time_days()*24+level.get_time_hours() --time in game hours
	return gtime
end

function send_tip(news_text, header, timeout, showtime, sender, sound)
	if not news_text or db.actor:has_info("pda_is_broken") then return end
	if not header then header="GPS" end
	if not timeout then timeout = 0 end
	if not showtime then showtime = 5 end
	local player = nil
	if xr_sound and xr_sound.get_safe_sound_object then
	player = xr_sound.get_safe_sound_object([[device\pda\pda_tip]]) 
	end
	if player and player.play and db and db.actor then
	player:play(db.actor, timeout, sound_object.s2d)
	end
	if db and db.actor and db.actor.give_game_news then
	local x = 0
	local y = 706
	local news_text = "%c[255,160,160,160]"..header.."\\n".."%c[default]"..news_text
	db.actor:give_game_news(news_text, "ui\\ui_iconsTotal", Frect():set(x,y,83,47), timeout*1000, showtime*1000)
	end
	return true
end

function sak.dbglog(msg)
	if is_gps_debug and msg and get_console() then
	end
end

function IsHuman(object, class_id)
	return IsStalker(object, class_id)
end

function IsGameObject(obj)
	local bResult = false
	if (obj and obj.fov) then
		bResult = true
	end
	return bResult
end

function get_inventory_box_id(obj)
	if not obj then
		return
	end
	local aobj = alife():object(obj:id())
	if aobj and aobj.parent_id then
		return aobj.parent_id
	end
end

function get_health(npc)
	if npc then
		if IsGameObject(npc) then
			return npc.health
		elseif npc.health then
			return npc:health()
		else return 1
		end
	end
	return nil
end

function get_health_str(npc)
	if get_health(npc) <= 0 then
		return "погиб"
	end
	return "жив"
end

function is_find_item(boxId, itemId)
	if boxId and itemId and items_in_box and items_in_box[boxId] then
		for i, v in pairs(items_in_box[boxId]) do
			if v.id==itemId then
				return true
			end
		end
	end
	return false
end

function insert_item(boxId, item)
	if boxId and boxId~=0 and boxId~=BAD_OBJ_ID and item then
		if not is_find_item(boxId, item.id) then 
			if not items_in_box[boxId] then items_in_box[boxId] = {} end
			table.insert(items_in_box[boxId], {id = item.id, name=item:name()})
			--ODS("[~T/~B]. добавляем в таблицу [" .. boxId .. "] предмет:" .. item:name())
		end
	end
end

function remove_item(boxId, item)
	if boxId and item then
		local itemId = item.id
		if boxId and itemId and items_in_box[boxId] then
			for i, v in pairs(items_in_box[boxId]) do
				if v.id==itemId then
				   table.remove(items_in_box[boxId], i)
				end
			end
		end
	end
end

function get_gps_count(boxId)
	if not boxId then
		return 0
	end
	if boxId==0 or boxId==BAD_OBJ_ID then 
		return 0 
	end
	local locObj
	local gps_count = 0
	if items_in_box[boxId] then
		for i, v in pairs(items_in_box[boxId]) do
			locObj = alife():object(v.id)
			if locObj and locObj:section_name() and locObj:section_name()=="amk_metka" then
				gps_count = gps_count + 1
			end
		end
	end
	return gps_count
end

function load_items()
    wprintf("[~T/~U/~B].~C0B #PERF:~C07 gps_habar.load_items start ")
	local ids_box, cnt_box = registry.sc_objects("*inventory_box*", false, 15) -- slow update
    wprintf("[~T/~U/~B].~C0B #PERF:~C07 gps_habar.load_items cnt_box =~C0D %d~C07", cnt_box)
    local owner_list = {}
    local ids, cnt = registry.all_objects(false)
    local added = 0 
    
    for i, id in ipairs(ids) do
      local obj = g_sim:object(id)
      if obj then
         local pid = obj.parent_id
         if pid < BAD_OBJ_ID then
            local t = owner_list[pid] or {}              
            table.insert (t, obj)
            owner_list[pid] = t
            added = added + 1
         end                         
      end
    end
    wprintf("[~T/~U/~B].~C0B #PERF:~C07 gps_habar.load_items owner_list size =~C0D %d~C07, added items =~C0D %d~C07", misc.table_size(owner_list), added)  
    
    added = 0
         
    items_in_box = {}
 
	for n=1,cnt_box do
		local id_box = ids_box[n]        
        local tmp = {}
		-- local ids,cnt = registry.inv_objects(id_box, true) -- получить содержимое ящика
        local objs = owner_list[id_box] or {}  
		for a, aobj in ipairs(objs) do
		   table.insert(tmp, {id = aobj.id, name = aobj:name() })
           added = added + 1             
		end
        items_in_box[id_box] = tmp    
	end
 
	local ids_st = registry.clsid_objects(CLID_STALKER, CLID_STALKER, true, nil, 15)    
	local cnt_st = #ids_st
    wprintf("[~T/~U/~B].~C0B #PERF:~C07 gps_habar.load_items stalkers =~C0D %d~C07", cnt_st)
	for n, id_st in ipairs(ids_st) do
		local id_st = ids_st[n]
        local tmp = {}
        -- if not items_in_box[id_st] then items_in_box[id_st] = {} end       
		-- local ids,cnt = registry.inv_objects(id_st, true) -- что там у сталкера
        local objs = owner_list[id_st] or {} 
		for a, aobj in ipairs(objs) do
		  table.insert(tmp, { id = aobj.id, name=aobj:name() })
          added = added + 1
		end
        items_in_box[id_st] = tmp  
	end
 
   wprintf("[~T/~U/~B].~C0B #PERF:~C07 gps_habar.load_items processed~C0D %d~C07 objects", added)
end

gps_habar.load_items = load_items

function get_local_time(gtime)
	gdays = math.floor(gtime / 24);
	ghours = gtime - gdays*24;
	local res = ""
	if gdays > 0 then
		res = tostring(gdays) .. "дн "
	end
	if ghours > 0 then
		res = res .. tostring(ghours) .. "ч"
	end
	return trim(res)
end

function get_npc_name(box)
	if box then
		if news_main then
			return tostring(news_main.get_npc_name(box))
		elseif m_amk_news then
			return tostring(m_amk_news.get_npc_name(box))
		end
	end
	return "'Неизвестный'"
end

function get_npc_presentation(box)
	if box then
		if news_main then
			return tostring(news_main.get_npc_name(box) .. "(" .. game.translate_string(news_main.get_npc_community(box)) .. ", " .. game.translate_string(news_main.get_npc_rank(box)))
		elseif m_amk_news then
			return tostring(m_amk_news.get_npc_name(box) .. "(" .. game.translate_string(m_amk_news.get_npc_community(box)) .. ", " .. game.translate_string(m_amk_news.get_npc_rank(box)))
		end
	end
	return get_npc_name(box)
end

function remove_all_spots(boxId)
	if boxId then
		amk.remove_spot_from_map(boxId, "habar_location")
		amk.remove_spot_from_map(boxId, "habar_clear_location")
		amk.remove_spot_from_map(boxId, "habar_location_w")
		amk.remove_spot_from_map(boxId, "habar_clear_location_w")
		amk.remove_spot_from_map(boxId, "gps_stalker")
	end
end

function remove_label(boxId)
	if boxId then
		labels[boxId] = nil
	end
end

function reinit_box(boxId)
	if not boxId or boxId==0 or boxId==BAD_OBJ_ID or not items_in_box then
		return
	end
	if items_in_box[boxId] then
		local aobj
		for i, v in pairs(items_in_box[boxId]) do
			if v.id then
				aobj = alife():object(v.id)
				if not aobj then
					table.remove(items_in_box[boxId], i)
				elseif aobj.parent_id~=boxId then
					table.remove(items_in_box[boxId], i)
				end
			end
		end
	end
end

function recharge_gps(item, box)
	if not auto_recharge then
		return
	end
	if not box then return end
	local boxId = nil
	if box then
		boxId = box:id()
	else
		boxId = get_inventory_box_id(item)
	end
	if not boxId then
		return
	end
	if boxId==0 or boxId==BAD_OBJ_ID or box:clsid()==CLID_TRADER then 
		return 
	end
	if not labels[boxId] then
		return
	end
	labels[boxId].at = activity_time
	labels[boxId].wr = 0
	labels[boxId].wi = 0
	labels[boxId].wt = warning_time
	labels[boxId].wit = warning_icons_time
	labels[boxId].gt = game_hours()
	labels[boxId].upd = game_minutes()
	labels[boxId].wh = 0
	nlc_vars.gps_labels = labels
end

function update_gps(item, box, boxId, is_new_metka)
	is_gps_update_in_process = true
	if not boxId then
		if box then
			boxId = box:id()
		else
			boxId = get_inventory_box_id(item)
		end
	end
	if boxId then
		box = alife():object(boxId)
	end
	if not boxId then
		is_gps_update_in_process = false
		return
	end
	if not box then
		local aobj = alife():object(boxId)
		if not aobj then
			remove_label(boxId)
		end
		is_gps_update_in_process = false
		return
	end
	if boxId==0 or boxId==BAD_OBJ_ID or box:clsid()==CLID_TRADER then 
		is_gps_update_in_process = false
		return
	end
	if IsHuman(box) then
		update_gps_stalker(box, boxId, is_new_metka)
	else
		update_gps_habar(boxId)
	end
	is_gps_update_in_process = false
end

function update_gps_stalker(box, boxId, is_new_metka)
	local gps_count = get_gps_count(boxId)
	local is_save_table = false
	if gps_count > 0 then
		local fl_send_tip_msg = false
		local text_metki = ""
		local gm = game_minutes()
		local gh = game_hours()
		if not labels[boxId] then
			if is_new_metka~=true then
				return
			end
			fl_send_tip_msg = true -- надо сообщить что ставим новую метку
			labels[boxId] = {wr = 0, wi = 0, gt = gh, wt = warning_time, at = activity_time, wit = warning_icons_time, upd = gm, wh = 0}
			is_save_table = true
		end
		local npc_name = get_npc_name(box)
		local aobj = alife():object(boxId)
		if is_warning_on_death and aobj and aobj and get_health(aobj) <= 0 and labels[boxId].wh==0 then
			labels[boxId].wh = 1
			is_save_table = true
			send_tip(game.translate_string("%c[255,255,128,128]Погиб сталкер " .. npc_name .. " с GPS-маячком"), nil, nil, 5)
		end
		local text_health = ""
		if is_show_health then
			text_health = ", " .. get_health_str(box)
		end
		text_metki = get_npc_presentation(box) .. text_health .. ")."
		
		local location = "gps_stalker"
		if fl_send_tip_msg then
			send_tip("Установлена метка на сталкера " .. get_npc_name(box), nil, nil, 5)
		end
		remove_all_spots(boxId)
		amk.add_spot_on_map(boxId, location, text_metki)
	else
		remove_all_spots(boxId)
		remove_label(boxId)
		is_save_table = true
	end
	if is_save_table then
		nlc_vars.gps_labels = labels
	end
end

function correct_name( inv_name )
	if inv_name then
		if     strposx( inv_name, "Патрон" ) then return trim( string.gsub( inv_name, "Патрон", "П:" ) )
		elseif strposx( inv_name, "Комбинезон" ) then return trim( string.gsub( inv_name, "Комбинезон", "Комб" ) )
		elseif strposx( inv_name, "Бронекостюм" ) then return trim( string.gsub( inv_name, "Бронекостюм", "Комб" ) )
		elseif strposx( inv_name, "Антирадиационные препараты") then return "Антирад"
		elseif strposx( inv_name, "Экзоскелет") then return trim( string.gsub( inv_name, "Экзоскелет", "Экза" ) )
		elseif strposx( inv_name, "Радость туриста") then return "Консерва"
		elseif strposx( inv_name, "Колбаса") then return "Колбаса"
		elseif strposx( inv_name, "Водка") then return "Водка"
		elseif strposx( inv_name, "Энергетический") or strposx(inv_name, "Энергетик") then return "Энергетик"
		end
	else
		return ""
	end
	return inv_name
end

-- function get_color(secName)
-- 	if not secName or string.len(secName)==0 then
-- 		return "%c[default]"
-- 	end
-- 	local lsecName = string.lower(secName)
-- 	if string.find(lsecName, "wpn_")==1 then
-- 		return "%c[255,243,122,11]"
-- 	elseif string.find(lsecName, "ammo_",1,true)==1 or string.find(lsecName, "grenade_",1,true)==1 then
-- 		return "%c[255,129,129,11]"
-- 	elseif string.find(lsecName, "af_",1,true)==1 then
-- 		return "%c[207,162,1,11]"
-- 	elseif string.find(lsecName, "outfit",1,true) then
-- 		return "%c[100,255,255,11]"
-- 	elseif string.find(lsecName, "pda",1,true) or string.find(lsecName, "flash",1,true) then
-- 		return "%c[50,1,200,11]"
-- 	end
-- 	return "%c[default]"
-- end

function get_color( secName )
	if not secName or string.len( secName ) == 0 then return "%c[default]" end
	local lsecName = string.lower( secName )
	if 	   strposx( lsecName, "repair_" )		 then return "%c[255,0,255,255]"      -- ремнаборы и ремящик
	elseif strposx( lsecName, "wpn_" ) 			 then return "%c[255,255,130,0]"      -- пухи
	elseif strposx( lsecName, "grenade_" ) or
		   strposx( lsecName, "_m209" ) or
		   strposx( lsecName, "_vog" )           then return "%c[250,200,140,120]"    -- гранаты
	elseif strposx( lsecName, "ammo_" )          then return "%c[250,180,180,100]"    -- патроны
	elseif strposx( lsecName, "af_") or
		   strposx( lsecName, "art_box")	     then return "%c[255,255,70,150]"     -- артефакты и контейнеры
	elseif strposx( lsecName, "outfit" ) or
		   strposx( lsecName, "exoskeleton" ) 	 then return "%c[230,250,230,0]"      -- бронька
	elseif strposx( lsecName, "pda" ) or
		   strposx( lsecName, "flash" )  		 then return "%c[230,180,150,250]"    -- ПДА и флешки
 	elseif strposx( lsecName, "medkit" ) or
		   strposx( lsecName, "antirad" ) or
		   strposx( lsecName, "bandage" ) 		 then return "%c[255,1,230,80]"       -- медицина
    elseif strposx( lsecName, "mutant_" )        then return "%c[255,70,150,250]"     -- запчасти
	end
	return "%c[default]"
end


function update_gps_habar(boxId)
	local gps_count = get_gps_count(boxId)
	if gps_count > 0 then
		local fl_send_tip_msg = false
		local text_metki = ""
		local gm = game_minutes()
		local gh = game_hours()
		if not labels[boxId] then
			fl_send_tip_msg = true
			labels[boxId] = {wr = 0, wi = 0, gt = gh, wt = warning_time, at = activity_time, wit = warning_icons_time, upd = gm, wh = 0}
			nlc_vars.gps_labels = labels
		end
		if items_in_box[boxId] then
			local secName, invName, locObj
			local itemsbox = {}
			local is_yes
			for i, v in pairs(items_in_box[boxId]) do
				locObj = alife():object(v.id)
				if locObj and locObj:section_name() then
					secName = locObj:section_name()
					if not system_ini():r_string(secName, "inv_name") then invName = "Хрень" 
					else
					invName = correct_name(game.translate_string(system_ini():r_string(secName, "inv_name")))
					end
					is_yes = false
					for k, kk in pairs(itemsbox) do
						if kk.sn==secName then
							kk.cnt = kk.cnt + 1
							is_yes = true
							break
						end
					end
					if not is_yes then
						table.insert(itemsbox, {sn = secName, inv = invName, cnt = 1, clr = get_color(secName)})
					end
				end
			end
			table.sort(	itemsbox, 
						function(a,b)
							return(a.clr > b.clr)
						end
			)
			if table.getn(itemsbox)==1 and itemsbox[1].sn=="amk_metka" and itemsbox[1].cnt==1 then
			else
				local is_one_item_on_string = true
				if table.getn(itemsbox) > max_comments_strings_on_screen then
					is_one_item_on_string = false
				end
				for i, v in pairs(itemsbox) do
					if not (v.sn=="amk_metka" and v.cnt==1) then
						if is_color_and_sort_list and is_one_item_on_string then
							if text_metki~="" then 
								text_metki = text_metki.."\\n"
							end
							text_metki = text_metki .. v.clr .. v.inv
						else
							if text_metki~="" then 
								text_metki = text_metki .. v.clr .. ", "
							end
							text_metki = text_metki .. v.inv
						end
						
						if is_show_quantity and ( v.cnt > 1 ) then 
							text_metki = text_metki .. "(" .. tostring(v.cnt) .. ")" 
						end
					end
				end
			end
		end
		local is_warning = false
		local labels_item = labels[boxId]
		if habar_list_mode and labels_item.at > 0 and labels_item.wit > 0 and((gh - labels_item.gt) >=(labels_item.at - labels_item.wit)) then
			is_warning = true
		end
		if text_metki=="" then
			if fl_send_tip_msg then
				send_tip("В схроне нет хабара. Установлена метка пустого тайника.", nil, nil, 5)
			end
			if is_warning then
				location = "habar_clear_location_w"
			else
				location = "habar_clear_location"
			end
			
			text_metki = "Пустой тайник."
		else
			text_metki = text_metki .. "."
			if fl_send_tip_msg then
				send_tip("Установлена метка со списком хабара.", nil, nil, 5)
			end
			if is_warning then
				location = "habar_location_w"
			else
				location = "habar_location"
			end
		end
		if habar_list_mode and labels_item.at > 0 then
			--text_metki = get_local_time(labels_item.gt + labels_item.at - gh) .. ".\\n " .. text_metki
		end
		remove_all_spots(boxId)
		amk.add_spot_on_map(boxId, location, text_metki)
	else
		remove_all_spots(boxId)
		remove_label(boxId)
		nlc_vars.gps_labels = labels
	end
end

function update_gps_state()
	local aobj, lvname
	local is_save_table = false
 
	if habar_list_mode then
		local gm = game_minutes()
		local gh = game_hours()
		for i, v in pairs(labels) do
			if v.at > 0 and v.wt > 0 and v.wr==0 and gh - v.gt > v.at - v.wt then
				aobj = alife():object(i)
				lvname = ""
				if aobj then
					lvname = news_data.level_name[alife():level_name(game_graph():vertex(aobj.m_game_vertex_id):level_id())][2]
				end
				v.wr = 1
				send_tip(game.translate_string("%c[255,255,128,128]В маячке " .. lvname .. " надо сменить батарею."), nil, nil, 5) 
				is_save_table = true
			end
			if (gm - v.upd > 3 and is_update_on_time) or(v.wit > 0 and v.wi==0 and gh - v.gt > v.at - v.wit) then
				v.wi = 1
				v.upd = gm
				if not is_gps_update_in_process then
					update_gps(nil, nil, i)
				end
				is_save_table = true
			end
			if v.at > 0 and gh - v.gt > v.at then
				aobj = alife():object(i)
				lvname = ""
				if aobj then
					lvname = news_data.level_name[alife():level_name(game_graph():vertex(aobj.m_game_vertex_id):level_id())][2]
				end
				send_tip(game.translate_string("%c[255,255,128,128]В маячке " .. lvname .. " села батарея. Связь потеряна."), nil, nil, 5)
				remove_all_spots(i)
				remove_label(i)
				is_save_table = true
			end	
		end
	end
	if is_save_table then
		nlc_vars.gps_labels = labels
	end
end

function show_dlg_dots_npc(obj)
	if not obj or not is_set_label_on_npc then
		return
	end
	local secName = obj:section()
	local boxId = get_inventory_box_id(obj)
	if not boxId or boxId==0 or boxId==BAD_OBJ_ID or not secName or secName~="amk_metka" then
		return
	end
	local box = alife():object(boxId)
	if not box then 
		return
	end
	if not IsHuman(box) or labels[boxId] then
		return
	end
	local spwn=ui_gps_trade.gps_trade(get_hud(), boxId)
	level.start_stop_menu(spwn,true)
end

function on_game_loading()
    bind_stalker.log_init_stage("gps_habar.on_game_loading")  
	local gps_ini = ini_file("misc\\gps_habar.ltx")
	activity_time          = tonumber(gps_ini:r_string("amk_metka", "activity_time"))
	warning_time           = tonumber(gps_ini:r_string("amk_metka", "warning_time"))
	warning_icons_time     = tonumber(gps_ini:r_string("amk_metka", "warning_icons_time"))
	habar_list_mode        = toboolean(gps_ini:r_string("amk_metka", "habar_list_mode"))
	auto_recharge          = toboolean(gps_ini:r_string("amk_metka", "auto_recharge"))
	is_show_quantity       = toboolean(gps_ini:r_string("amk_metka", "show_quantity"))
	is_update_on_time      = toboolean(gps_ini:r_string("amk_metka", "update_on_time"))
	is_color_and_sort_list = toboolean(gps_ini:r_string("amk_metka", "color_and_sort_list"))
	is_set_label_on_npc    = toboolean(gps_ini:r_string("amk_metka", "set_label_on_npc"))
	is_show_health         = toboolean(gps_ini:r_string("amk_metka", "show_health"))
    is_warning_on_death    = toboolean(gps_ini:r_string("amk_metka", "warning_on_death"))
	labels = xray_vars.load_table(nlc_vars, "gps_labels", {})
    bind_stalker.log_init_stage("gps_habar.on_game_loading#2") 
	load_items()
    if xr_build_id >= 5820 then gps_ini:release() end
end

function on_item_take(item)
	if item and item:section() and item:section()=="amk_metka" then
		for i, v in pairs(labels) do
			reinit_box(i)
			update_gps(nil, nil, i)
		end
	end
end

function on_item_take_from_box(box, item)
	if item and item:id() and box and box:id() then
		remove_item(box:id(), alife():object(item:id()))
	end
	recharge_gps(item, box)
	update_gps(item, box, nil)
end

function on_item_drop(obj)
	if obj and obj:id() then
		local box_id=get_inventory_box_id(obj)
		insert_item(box_id, alife():object(obj:id()))
	end
	show_dlg_dots_npc(obj)
	recharge_gps(obj, nil)
	update_gps(obj, nil, nil)
end

function on_actor_update(delta)
	update_gps_state()
end
